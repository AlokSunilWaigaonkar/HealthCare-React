{"ast":null,"code":"import axios from \"axios\";\n\n// Create Axios instance\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\" // Update if deployed\n});\n\n// Request Interceptor: Attach access token\napi.interceptors.request.use(config => {\n  const accessToken = localStorage.getItem(\"token\");\n  if (accessToken) {\n    config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n  }\n  return config;\n}, error => Promise.reject(error));\n\n// Response Interceptor: Handle 401 and refresh token logic\napi.interceptors.response.use(response => response,\n// Pass all success responses\nasync error => {\n  var _error$response, _error$response2;\n  const originalRequest = error.config;\n\n  // Log for debugging\n  console.log(\"‚ùå API error caught:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, originalRequest.url);\n\n  // Check if token expired and refresh token is available\n  const isTokenExpired = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 401;\n  const hasRefreshToken = localStorage.getItem(\"refreshToken\");\n  if (isTokenExpired && !originalRequest._retry && hasRefreshToken) {\n    originalRequest._retry = true;\n    try {\n      console.log(\"üîÅ Refreshing access token...\");\n      const refreshRes = await axios.post(\"http://localhost:8080/auth/refresh\", {\n        refreshToken: localStorage.getItem(\"refreshToken\")\n      }, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      const newAccessToken = refreshRes.data.accessToken;\n      if (!newAccessToken) {\n        throw new Error(\"Refresh token API didn't return a new accessToken.\");\n      }\n\n      // Save new token & retry original request\n      localStorage.setItem(\"token\", newAccessToken);\n      originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\n      console.log(\"‚úÖ Access token refreshed, retrying original request.\");\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error(\"üö´ Refresh failed:\", refreshError.response || refreshError);\n      localStorage.clear(); // Clear both tokens\n      window.location.href = \"/login\"; // Redirect to login\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","interceptors","request","use","config","accessToken","localStorage","getItem","headers","error","Promise","reject","response","_error$response","_error$response2","originalRequest","console","log","status","url","isTokenExpired","hasRefreshToken","_retry","refreshRes","post","refreshToken","newAccessToken","data","Error","setItem","refreshError","clear","window","location","href"],"sources":["/Users/alokwaigaonkar/health_care/FrontEnd/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// Create Axios instance\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\", // Update if deployed\n});\n\n// Request Interceptor: Attach access token\napi.interceptors.request.use(\n  (config) => {\n    const accessToken = localStorage.getItem(\"token\");\n    if (accessToken) {\n      config.headers[\"Authorization\"] = `Bearer ${accessToken}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Response Interceptor: Handle 401 and refresh token logic\napi.interceptors.response.use(\n  (response) => response, // Pass all success responses\n  async (error) => {\n    const originalRequest = error.config;\n\n    // Log for debugging\n    console.log(\"‚ùå API error caught:\", error.response?.status, originalRequest.url);\n\n    // Check if token expired and refresh token is available\n    const isTokenExpired = error.response?.status === 401;\n    const hasRefreshToken = localStorage.getItem(\"refreshToken\");\n\n    if ((isTokenExpired) && !originalRequest._retry && hasRefreshToken) {\n      originalRequest._retry = true;\n\n      try {\n        console.log(\"üîÅ Refreshing access token...\");\n\n        const refreshRes = await axios.post(\n          \"http://localhost:8080/auth/refresh\",\n          {\n            refreshToken: localStorage.getItem(\"refreshToken\"),\n          },\n          {\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n          }\n        );\n\n        const newAccessToken = refreshRes.data.accessToken;\n        if (!newAccessToken) {\n          throw new Error(\"Refresh token API didn't return a new accessToken.\");\n        }\n\n        // Save new token & retry original request\n        localStorage.setItem(\"token\", newAccessToken);\n        originalRequest.headers[\"Authorization\"] = `Bearer ${newAccessToken}`;\n\n        console.log(\"‚úÖ Access token refreshed, retrying original request.\");\n        return api(originalRequest);\n      } catch (refreshError) {\n        console.error(\"üö´ Refresh failed:\", refreshError.response || refreshError);\n        localStorage.clear(); // Clear both tokens\n        window.location.href = \"/login\"; // Redirect to login\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB,CAAE;AACpC,CAAC,CAAC;;AAEF;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV,MAAMC,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACjD,IAAIF,WAAW,EAAE;IACfD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,WAAW,EAAE;EAC3D;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAKC,OAAO,CAACC,MAAM,CAACF,KAAK,CACjC,CAAC;;AAED;AACAX,GAAG,CAACG,YAAY,CAACW,QAAQ,CAACT,GAAG,CAC1BS,QAAQ,IAAKA,QAAQ;AAAE;AACxB,MAAOH,KAAK,IAAK;EAAA,IAAAI,eAAA,EAAAC,gBAAA;EACf,MAAMC,eAAe,GAAGN,KAAK,CAACL,MAAM;;EAEpC;EACAY,OAAO,CAACC,GAAG,CAAC,qBAAqB,GAAAJ,eAAA,GAAEJ,KAAK,CAACG,QAAQ,cAAAC,eAAA,uBAAdA,eAAA,CAAgBK,MAAM,EAAEH,eAAe,CAACI,GAAG,CAAC;;EAE/E;EACA,MAAMC,cAAc,GAAG,EAAAN,gBAAA,GAAAL,KAAK,CAACG,QAAQ,cAAAE,gBAAA,uBAAdA,gBAAA,CAAgBI,MAAM,MAAK,GAAG;EACrD,MAAMG,eAAe,GAAGf,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAE5D,IAAKa,cAAc,IAAK,CAACL,eAAe,CAACO,MAAM,IAAID,eAAe,EAAE;IAClEN,eAAe,CAACO,MAAM,GAAG,IAAI;IAE7B,IAAI;MACFN,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAE5C,MAAMM,UAAU,GAAG,MAAM1B,KAAK,CAAC2B,IAAI,CACjC,oCAAoC,EACpC;QACEC,YAAY,EAAEnB,YAAY,CAACC,OAAO,CAAC,cAAc;MACnD,CAAC,EACD;QACEC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CACF,CAAC;MAED,MAAMkB,cAAc,GAAGH,UAAU,CAACI,IAAI,CAACtB,WAAW;MAClD,IAAI,CAACqB,cAAc,EAAE;QACnB,MAAM,IAAIE,KAAK,CAAC,oDAAoD,CAAC;MACvE;;MAEA;MACAtB,YAAY,CAACuB,OAAO,CAAC,OAAO,EAAEH,cAAc,CAAC;MAC7CX,eAAe,CAACP,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUkB,cAAc,EAAE;MAErEV,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MACnE,OAAOnB,GAAG,CAACiB,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOe,YAAY,EAAE;MACrBd,OAAO,CAACP,KAAK,CAAC,oBAAoB,EAAEqB,YAAY,CAAClB,QAAQ,IAAIkB,YAAY,CAAC;MAC1ExB,YAAY,CAACyB,KAAK,CAAC,CAAC,CAAC,CAAC;MACtBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ,CAAC,CAAC;MACjC,OAAOxB,OAAO,CAACC,MAAM,CAACmB,YAAY,CAAC;IACrC;EACF;EAEA,OAAOpB,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeX,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}