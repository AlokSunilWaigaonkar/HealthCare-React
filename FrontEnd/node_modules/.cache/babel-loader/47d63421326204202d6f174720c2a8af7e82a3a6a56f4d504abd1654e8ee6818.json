{"ast":null,"code":"var _jsxFileName = \"/Users/alokwaigaonkar/health_care/FrontEnd/src/components/Doctor/PatientList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PatientCard from \"./PatientCard\";\nimport api from \"../../api\"; // import your api.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PatientList() {\n  _s();\n  const [patients, setPatients] = useState([]);\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const doctorId = localStorage.getItem(\"id\");\n  console.log(doctorId);\n  useEffect(() => {\n    const fetchPatients = async () => {\n      try {\n        const res = await api.get(`/doctor/${doctorId}/patients`);\n        setPatients(res.data); // adapt if your API wraps the array in { data: [...] }\n      } catch (error) {\n        console.error(\"Failed to fetch patients:\", error);\n        setPatients([]); // Optionally set to empty array on error\n      }\n    };\n    console.log(patients);\n    if (doctorId) {\n      fetchPatients();\n    }\n  }, [pa]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientList, \"nJK7y1Lqv0Y1Ja5iIyK+yMnyHxs=\");\n_c = PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","useState","useEffect","PatientCard","api","jsxDEV","_jsxDEV","PatientList","_s","patients","setPatients","selectedPatient","setSelectedPatient","doctorId","localStorage","getItem","console","log","fetchPatients","res","get","data","error","pa","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alokwaigaonkar/health_care/FrontEnd/src/components/Doctor/PatientList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PatientCard from \"./PatientCard\";\nimport api from \"../../api\"; // import your api.js\n\nexport default function PatientList() {\n  const [patients, setPatients] = useState([]);\n  const [selectedPatient, setSelectedPatient] = useState(null);\n\n  const doctorId = localStorage.getItem(\"id\");\n  console.log(doctorId);\n\n  useEffect(() => {\n    const fetchPatients = async () => {\n      try {\n        const res = await api.get(`/doctor/${doctorId}/patients`);\n        setPatients(res.data); // adapt if your API wraps the array in { data: [...] }\n      } catch (error) {\n        console.error(\"Failed to fetch patients:\", error);\n        setPatients([]); // Optionally set to empty array on error\n      }\n    };\n    console.log(patients);\n\n    if (doctorId) {\n      fetchPatients();\n    }\n  }, [pa]);\n\n  return (\n    <div>\n      {/* <div className=\"patient-list row\" style={{ marginTop: \"4rem\" }}>\n        {patients.map((patient, index) => (\n          <PatientCard\n            key={index}\n            name={patient.name}\n            contact={patient.contact}\n            email={patient.email}\n            gender={patient.gender}\n          />\n        ))}\n      </div> */}\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,GAAG,MAAM,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAE5D,MAAMY,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAErBX,SAAS,CAAC,MAAM;IACd,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMf,GAAG,CAACgB,GAAG,CAAC,WAAWP,QAAQ,WAAW,CAAC;QACzDH,WAAW,CAACS,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDZ,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;MACnB;IACF,CAAC;IACDM,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;IAErB,IAAII,QAAQ,EAAE;MACZK,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACK,EAAE,CAAC,CAAC;EAER,oBACEjB,OAAA;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAYK,CAAC;AAEV;AAACnB,EAAA,CAvCuBD,WAAW;AAAAqB,EAAA,GAAXrB,WAAW;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}