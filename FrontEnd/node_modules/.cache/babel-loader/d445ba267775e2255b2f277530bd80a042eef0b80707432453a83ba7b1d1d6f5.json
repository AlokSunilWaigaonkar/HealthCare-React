{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\",\n  withCredentials: true,\n  // Always send cookies (JWT, refresh)\n  xsrfCookieName: \"XSRF-TOKEN\",\n  xsrfHeaderName: \"X-XSRF-TOKEN\"\n});\n\n// ‚úÖ Axios Interceptor for auto refresh on 401\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    originalRequest.withCredentials = true;\n    try {\n      // Call refresh-token endpoint\n      console.log(\"üîÅ 401 detected. Trying token refresh...\");\n      await api.post(\"/auth/refresh-token\", null, {\n        withCredentials: true\n      });\n\n      // Retry the original request after token refresh\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error(\"üî¥ Token refresh failed. Redirecting to login.\");\n      window.location.href = \"/login\";\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","xsrfCookieName","xsrfHeaderName","interceptors","response","use","error","_error$response","originalRequest","config","status","_retry","console","log","post","refreshError","window","location","href","Promise","reject"],"sources":["/Users/alokwaigaonkar/health_care/FrontEnd/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\",\n  withCredentials: true, // Always send cookies (JWT, refresh)\n  xsrfCookieName: \"XSRF-TOKEN\",\n  xsrfHeaderName: \"X-XSRF-TOKEN\"\n});\n\n// ‚úÖ Axios Interceptor for auto refresh on 401\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if ((error.response?.status === 401  ) && !originalRequest._retry) {\n      originalRequest._retry = true;\n      originalRequest.withCredentials = true;\n\n      try {\n        // Call refresh-token endpoint\n        console.log(\"üîÅ 401 detected. Trying token refresh...\");\n        await api.post(\"/auth/refresh-token\", null, {\n          withCredentials: true,\n        });\n\n        // Retry the original request after token refresh\n        return api(originalRequest);\n      } catch (refreshError) {\n        console.error(\"üî¥ Token refresh failed. Redirecting to login.\");\n        window.location.href = \"/login\";\n        return Promise.reject(refreshError);\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI;EAAE;EACvBC,cAAc,EAAE,YAAY;EAC5BC,cAAc,EAAE;AAClB,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EAAA,IAAAC,eAAA;EACf,MAAMC,eAAe,GAAGF,KAAK,CAACG,MAAM;EAEpC,IAAK,EAAAF,eAAA,GAAAD,KAAK,CAACF,QAAQ,cAAAG,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,MAAK,GAAG,IAAO,CAACF,eAAe,CAACG,MAAM,EAAE;IACjEH,eAAe,CAACG,MAAM,GAAG,IAAI;IAC7BH,eAAe,CAACR,eAAe,GAAG,IAAI;IAEtC,IAAI;MACF;MACAY,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvD,MAAMhB,GAAG,CAACiB,IAAI,CAAC,qBAAqB,EAAE,IAAI,EAAE;QAC1Cd,eAAe,EAAE;MACnB,CAAC,CAAC;;MAEF;MACA,OAAOH,GAAG,CAACW,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOO,YAAY,EAAE;MACrBH,OAAO,CAACN,KAAK,CAAC,gDAAgD,CAAC;MAC/DU,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MAC/B,OAAOC,OAAO,CAACC,MAAM,CAACL,YAAY,CAAC;IACrC;EACF;EAEA,OAAOI,OAAO,CAACC,MAAM,CAACd,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}