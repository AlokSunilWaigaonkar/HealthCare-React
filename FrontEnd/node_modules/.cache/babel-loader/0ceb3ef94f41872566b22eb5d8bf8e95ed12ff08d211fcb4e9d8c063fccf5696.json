{"ast":null,"code":"import axios from \"axios\";\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\",\n  withCredentials: true,\n  // Always send cookies (JWT, refresh)\n  xsrfCookieName: \"XSRF-TOKEN\",\n  xsrfHeaderName: \"X-XSRF-TOKEN\"\n});\n\n// ‚úÖ Axios Interceptor for auto refresh on 401\napi.interceptors.response.use(response => response, async error => {\n  const originalRequest = error.config;\n  const excludedUrls = [\"/auth/login\", \"/auth/register\", \"/auth/refresh-token\"];\n  const isExcluded = excludedUrls.some(url => originalRequest.url.includes(url));\n  if (error.response.status === 401 && !originalRequest._retry && !originalRequest.url.includes(\"/auth/refresh-token\") // ‚õî Prevent looping\n  && !isExcluded) {\n    originalRequest._retry = true;\n    try {\n      await axios.post(\"/auth/refresh-token\", {\n        withCredentials: true\n      });\n      return api(originalRequest);\n    } catch (refreshError) {\n      console.error(\"üîÅ Refresh token failed:\", refreshError);\n      return Promise.reject(refreshError);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","withCredentials","xsrfCookieName","xsrfHeaderName","interceptors","response","use","error","originalRequest","config","excludedUrls","isExcluded","some","url","includes","status","_retry","post","refreshError","console","Promise","reject"],"sources":["/Users/alokwaigaonkar/health_care/FrontEnd/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst api = axios.create({\n  baseURL: \"http://localhost:8080\",\n  withCredentials: true, // Always send cookies (JWT, refresh)\n  xsrfCookieName: \"XSRF-TOKEN\",\n  xsrfHeaderName: \"X-XSRF-TOKEN\"\n});\n\n// ‚úÖ Axios Interceptor for auto refresh on 401\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    const excludedUrls = [\"/auth/login\", \"/auth/register\", \"/auth/refresh-token\"];\n    const isExcluded = excludedUrls.some(url => originalRequest.url.includes(url));\n    if (\n      error.response.status === 401 &&\n      !originalRequest._retry &&\n      !originalRequest.url.includes(\"/auth/refresh-token\") // ‚õî Prevent looping\n    && !isExcluded) {\n      originalRequest._retry = true;\n    \n      try {\n        await axios.post(\"/auth/refresh-token\",  {\n          withCredentials: true\n        });\n    \n        return api(originalRequest);\n      } catch (refreshError) {\n        console.error(\"üîÅ Refresh token failed:\", refreshError);\n        return Promise.reject(refreshError);\n      }\n    }\n    \n\n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI;EAAE;EACvBC,cAAc,EAAE,YAAY;EAC5BC,cAAc,EAAE;AAClB,CAAC,CAAC;;AAEF;AACAL,GAAG,CAACM,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC1BD,QAAQ,IAAKA,QAAQ,EACtB,MAAOE,KAAK,IAAK;EACf,MAAMC,eAAe,GAAGD,KAAK,CAACE,MAAM;EAEpC,MAAMC,YAAY,GAAG,CAAC,aAAa,EAAE,gBAAgB,EAAE,qBAAqB,CAAC;EAC7E,MAAMC,UAAU,GAAGD,YAAY,CAACE,IAAI,CAACC,GAAG,IAAIL,eAAe,CAACK,GAAG,CAACC,QAAQ,CAACD,GAAG,CAAC,CAAC;EAC9E,IACEN,KAAK,CAACF,QAAQ,CAACU,MAAM,KAAK,GAAG,IAC7B,CAACP,eAAe,CAACQ,MAAM,IACvB,CAACR,eAAe,CAACK,GAAG,CAACC,QAAQ,CAAC,qBAAqB,CAAC,CAAC;EAAA,GACpD,CAACH,UAAU,EAAE;IACdH,eAAe,CAACQ,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF,MAAMnB,KAAK,CAACoB,IAAI,CAAC,qBAAqB,EAAG;QACvChB,eAAe,EAAE;MACnB,CAAC,CAAC;MAEF,OAAOH,GAAG,CAACU,eAAe,CAAC;IAC7B,CAAC,CAAC,OAAOU,YAAY,EAAE;MACrBC,OAAO,CAACZ,KAAK,CAAC,0BAA0B,EAAEW,YAAY,CAAC;MACvD,OAAOE,OAAO,CAACC,MAAM,CAACH,YAAY,CAAC;IACrC;EACF;EAGA,OAAOE,OAAO,CAACC,MAAM,CAACd,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeT,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}