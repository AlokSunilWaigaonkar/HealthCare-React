{"ast":null,"code":"var _jsxFileName = \"/Users/alokwaigaonkar/health_care/FrontEnd/src/components/Doctor/PatientList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport PatientCard from \"./PatientCard\";\nimport api from \"../../api\"; // import your api.js\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function PatientList() {\n  _s();\n  const [patients, setPatients] = useState([]);\n  const [selectedPatient, setSelectedPatient] = useState(null);\n\n  // Assume doctorId is stored in sessionStorage after login\n  const doctorId = sessionStorage.getItem(\"doctorId\");\n  useEffect(() => {\n    const fetchPatients = async () => {\n      try {\n        const res = await api.get(`/doctor/${doctorId}/patients`);\n        setPatients(res.data); // adapt if your API wraps the array in { data: [...] }\n      } catch (error) {\n        console.error(\"Failed to fetch patients:\", error);\n        setPatients([]); // Optionally set to empty array on error\n      }\n    };\n    if (doctorId) {\n      fetchPatients();\n    }\n  }, [doctorId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"patient-list row\",\n      style: {\n        marginTop: \"4rem\"\n      },\n      children: patients.map((patient, index) => /*#__PURE__*/_jsxDEV(PatientCard, {\n        name: patient.name,\n        contact: patient.contact,\n        email: patient.email,\n        gender: patient.gender\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n}\n_s(PatientList, \"nJK7y1Lqv0Y1Ja5iIyK+yMnyHxs=\");\n_c = PatientList;\nvar _c;\n$RefreshReg$(_c, \"PatientList\");","map":{"version":3,"names":["React","useState","useEffect","PatientCard","api","jsxDEV","_jsxDEV","PatientList","_s","patients","setPatients","selectedPatient","setSelectedPatient","doctorId","sessionStorage","getItem","fetchPatients","res","get","data","error","console","children","className","style","marginTop","map","patient","index","name","contact","email","gender","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alokwaigaonkar/health_care/FrontEnd/src/components/Doctor/PatientList.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport PatientCard from \"./PatientCard\";\nimport api from \"../../api\"; // import your api.js\n\nexport default function PatientList() {\n  const [patients, setPatients] = useState([]);\n  const [selectedPatient, setSelectedPatient] = useState(null);\n\n  // Assume doctorId is stored in sessionStorage after login\n  const doctorId = sessionStorage.getItem(\"doctorId\");\n\n  useEffect(() => {\n    const fetchPatients = async () => {\n      try {\n        const res = await api.get(`/doctor/${doctorId}/patients`);\n        setPatients(res.data); // adapt if your API wraps the array in { data: [...] }\n      } catch (error) {\n        console.error(\"Failed to fetch patients:\", error);\n        setPatients([]); // Optionally set to empty array on error\n      }\n    };\n\n    if (doctorId) {\n      fetchPatients();\n    }\n  }, [doctorId]);\n\n  return (\n    <div>\n      <div className=\"patient-list row\" style={{ marginTop: \"4rem\" }}>\n        {patients.map((patient, index) => (\n          <PatientCard\n            key={index}\n            name={patient.name}\n            contact={patient.contact}\n            email={patient.email}\n            gender={patient.gender}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,GAAG,MAAM,WAAW,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7B,eAAe,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACpC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAE5D;EACA,MAAMY,QAAQ,GAAGC,cAAc,CAACC,OAAO,CAAC,UAAU,CAAC;EAEnDb,SAAS,CAAC,MAAM;IACd,MAAMc,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,WAAWL,QAAQ,WAAW,CAAC;QACzDH,WAAW,CAACO,GAAG,CAACE,IAAI,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;QACjDV,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;MACnB;IACF,CAAC;IAED,IAAIG,QAAQ,EAAE;MACZG,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;EAEd,oBACEP,OAAA;IAAAgB,QAAA,eACEhB,OAAA;MAAKiB,SAAS,EAAC,kBAAkB;MAACC,KAAK,EAAE;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAAH,QAAA,EAC5Db,QAAQ,CAACiB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BtB,OAAA,CAACH,WAAW;QAEV0B,IAAI,EAAEF,OAAO,CAACE,IAAK;QACnBC,OAAO,EAAEH,OAAO,CAACG,OAAQ;QACzBC,KAAK,EAAEJ,OAAO,CAACI,KAAM;QACrBC,MAAM,EAAEL,OAAO,CAACK;MAAO,GAJlBJ,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKX,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC5B,EAAA,CAtCuBD,WAAW;AAAA8B,EAAA,GAAX9B,WAAW;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}